/* eslint-disable @typescript-eslint/no-unsafe-argument */
/* eslint-disable @typescript-eslint/restrict-plus-operands */
import { StaticJsonRpcProvider } from '@ethersproject/providers';
import { formatEther, parseEther } from '@ethersproject/units';
import { Button, Divider, Input, List, Layout, Menu, Dropdown,Select } from 'antd';
import { Address, Balance } from 'eth-components/ant';
import { DownOutlined, PlusSquareOutlined, ArrowDownOutlined } from '@ant-design/icons';
import { transactor } from 'eth-components/functions';
import { EthComponentsSettingsContext } from 'eth-components/models';
import { useContractReader, useEventListener, useGasPrice } from 'eth-hooks';
import { useEthersContext } from 'eth-hooks/context';
import { BigNumber } from 'ethers';
import React, { useState, FC, useContext, ReactNode } from 'react';

import { useAppContracts } from '~~/config/contractContext';
import { SetPurposeEvent } from '~~/generated/contract-types/YourContract';
import * as joeTokens from './tokensMetadata/JoeTokens.json';
import { Token } from '@uniswap/sdk';

export interface IExampleUIProps {
  mainnetProvider: StaticJsonRpcProvider | undefined;
  yourCurrentBalance: BigNumber | undefined;
  price: number;
}



export const ExampleUI: FC<IExampleUIProps> = (props) => {
  const [newPurpose, setNewPurpose] = useState('loading...');
  const ethersContext = useEthersContext();

  const yourContract = useAppContracts('YourContract', ethersContext.chainId);
  const [purpose] = useContractReader(yourContract, yourContract?.purpose, [], yourContract?.filters.SetPurpose());

  const [setPurposeEvents] = useEventListener<SetPurposeEvent>(yourContract, yourContract?.filters.SetPurpose(), 1);

  const signer = ethersContext.signer;
  const address = ethersContext.account ?? '';

  const ethComponentsSettings = useContext(EthComponentsSettingsContext);
  const [gasPrice] = useGasPrice(ethersContext.chainId, 'fast');
  const tx = transactor(ethComponentsSettings, ethersContext?.signer, gasPrice);

  const { mainnetProvider, yourCurrentBalance, price } = props;
  const { Header, Footer, Sider, Content } = Layout;
  const { Option } = Select;
  const [avaxTokens, setAvaxTokens] = useState(joeTokens.tokens);
  const [token0, setToken0] = useState('');
  const [token1, setToken1] = useState('');


  function onChangeToken0(value: any) {
    setToken0(value);
    console.log(`selected ${value}`);
  }

  function onSearchToken0(val: any) {
    console.log('search:', val);
  }
  function onChangeToken1(value: any) {
    setToken1(value);
    console.log(`selected ${value}`);
  }

  function onSearchToken1(val: any) {
    console.log('search:', val);
  }
  function TokenList() {
    return <>{avaxTokens.map((t) => (
        <Option value={t.address}>{t.symbol}</Option>
      ))
    }</>
  }

  return (
    <div>
      {/*
        ‚öôÔ∏è Here is an example UI that displays and sets the purpose in your smart contract:
      */}

      <div
        style={{
          border: '3px solid #cccccc',
          padding: 16,
          width: '80%',
          margin: 'auto',
          marginTop: 64,
          borderRadius: '100px',
          background: 'rgba(102, 102, 102, 0.22)',
        }}>
        <h2 style={{margin: '1em', fontSize: '30px'}}>Initialize Your Compounder</h2>
        {!(token0 && token1) && (
          <>
        {avaxTokens && (<>
        <div style={{display: 'inline-block', float: 'left', paddingLeft: '25%', fontSize: '15px'}}>
          <Select
            showSearch
            placeholder="Select a Token"
            optionFilterProp="children"
            onChange={onChangeToken0}
            onSearch={onSearchToken0}
            filterOption={(input, option) =>
              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
            }
          >

          {avaxTokens.map((t) => {
                return (<>
                <Option value={t.address}>
                <img
                  style={{
                    objectFit: 'cover',
                    width: '2em',
                    height: '2em',
                    borderRadius: '50%',
                    margin: '0.3em',
                    display: 'inline-block',
                  }}
                  src={t.logoURI}
                  alt={t.address}
                />
                  {t.symbol}
                  </Option>
                </>)
                })}

          </Select>
        </div>
        <div style={{display: 'inline-block', float: 'right', paddingRight: '25%'}}>
        <Select
            showSearch
            placeholder="Select a Token"
            optionFilterProp="children"
            onChange={onChangeToken1}
            onSearch={onSearchToken1}
            filterOption={(input, option) =>
              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
            }
          >
            {avaxTokens.map((t) => {
                return (<>
                <Option value={t.address}>
                <img
                  style={{
                    objectFit: 'cover',
                    width: '2em',
                    height: '2em',
                    borderRadius: '50%',
                    margin: '0.3em',
                    display: 'inline-block',
                  }}
                  src={t.logoURI}
                  alt={t.address}
                />
                  {t.symbol}
                  </Option>
                </>)
                })}
          </Select>
        </div>
        </>)}
                </>
        )}


        <div style={{marginTop: '10%'}}/>
        {token0 && token1 && (
          <>
          <div style={{width: '100%', alignContent: 'center'}}>
            <h3></h3>
            <div style={{float: 'left', marginLeft: '25%'}}>
                <img
                  style={{
                    objectFit: 'cover',
                    width: '5em',
                    height: '5em',
                    borderRadius: '50%',
                    margin: '0.3em',
                    display: 'inline-block',
                  }}
                  src={(avaxTokens.find((t) => t.address == token0))?.logoURI}
                  alt={token0}
                />
            </div>
            <PlusSquareOutlined style={{fontSize: '5em'}}/>
            <div style={{float: 'right', marginRight: '25%'}}>
                  <img
                    style={{
                      objectFit: 'cover',
                      width: '5em',
                      height: '5em',
                      borderRadius: '50%',
                      margin: '0.3em',
                      display: 'inline-block',
                    }}
                    src={(avaxTokens.find((t) => t.address == token1))?.logoURI}
                    alt={token1}
                  />
            </div>
          </div>
          <div>
          <ArrowDownOutlined />
          </div>
          </>
        )}






        <div style={{ margin: 8 }}>
          <Input
            onChange={(e): void => {
              setNewPurpose(e.target.value);
            }}
          />
          <Button
            style={{ marginTop: 8 }}
            onClick={async (): Promise<void> => {
              /* look how you call setPurpose on your contract: */
              /* notice how you pass a call back for tx updates too */
              const result = tx?.(yourContract?.setPurpose(newPurpose), (update: any) => {
                console.log('üì° Transaction Update:', update);
                if (update && (update.status === 'confirmed' || update.status === 1)) {
                  console.log(' üçæ Transaction ' + update.hash + ' finished!');
                  console.log(
                    ' ‚õΩÔ∏è ' +
                      update.gasUsed +
                      '/' +
                      (update.gasLimit || update.gas) +
                      ' @ ' +
                      parseFloat(update.gasPrice) / 1000000000 +
                      ' gwei'
                  );
                }
              });
              console.log('awaiting metamask/web3 confirm result...', result);
              console.log(await result);
            }}>
            Set Purpose!
          </Button>
        </div>
        <Divider />
        Your Address:
        <Address address={address} ensProvider={mainnetProvider} fontSize={16} />
        {/* use formatEther to display a BigNumber: */}
        <h2>Your Balance: {yourCurrentBalance ? formatEther(yourCurrentBalance) : '...'}</h2>
        <div>OR</div>
        <Balance address={address} price={price} />
        <Divider />
        <div>üê≥ Example Whale Balance:</div>
        <Balance balance={parseEther('1000')} price={price} address={address} />
        <Divider />
        {/* use formatEther to display a BigNumber: */}
        <h2>Your Balance: {yourCurrentBalance ? formatEther(yourCurrentBalance) : '...'}</h2>
        <Divider />
        Your Contract Address:
        <Address address={yourContract?.address} ensProvider={mainnetProvider} fontSize={16} />
        <Divider />
        <div style={{ margin: 8 }}>
          <Button
            onClick={(): void => {
              /* look how you call setPurpose on your contract: */
              void tx?.(yourContract?.setPurpose('üçª Cheers'));
            }}>
            Set Purpose to &quot;üçª Cheers&quot;
          </Button>
        </div>
        <div style={{ margin: 8 }}>
          <Button
            onClick={(): void => {
              /*
              you can also just craft a transaction and send it to the tx() transactor
              here we are sending value straight to the contract's address:
            */
              void tx?.({
                to: yourContract?.address,
                value: parseEther('0.001'),
              });
              /* this should throw an error about "no fallback nor receive function" until you add it */
            }}>
            Send Value
          </Button>
        </div>
        <div style={{ margin: 8 }}>
          <Button
            onClick={(): void => {
              /* look how we call setPurpose AND send some value along */
              void tx?.(yourContract?.setPurpose('üíµ Paying for this one!'));
              /* this will fail until you make the setPurpose function payable */
            }}>
            Set Purpose With Value
          </Button>
        </div>
        <div style={{ margin: 8 }}>
          <Button
            onClick={(): void => {
              /* you can also just craft a transaction and send it to the tx() transactor */
              void tx?.({
                to: yourContract?.address,
                value: parseEther('0.001'),
                data: yourContract?.interface?.encodeFunctionData?.('setPurpose', ['ü§ì Whoa so 1337!']),
              });
              /* this should throw an error about "no fallback nor receive function" until you add it */
            }}>
            Another Example
          </Button>
        </div>
      </div>

      {/*
        üìë Maybe display a list of events?
          (uncomment the event and emit line in YourContract.sol! )
      */}
      <div style={{ width: 600, margin: 'auto', marginTop: 32, paddingBottom: 32 }}>
        <h2>Events:</h2>
        <List
          bordered
          dataSource={setPurposeEvents}
          renderItem={(item: SetPurposeEvent): ReactNode => {
            return (
              <List.Item key={item.blockNumber + '_' + item.address}>
                <Address address={item.address} ensProvider={mainnetProvider} fontSize={16} /> {' - '}
                {item.args.purpose}
              </List.Item>
            );
          }}
        />
      </div>
    </div>
  );
};
